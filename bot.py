import json
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink
from parser import main
import os
import asyncio

bot = Bot(token='', parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)



@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_buttons = [
    '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', 
    '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    'TV/–§–æ—Ç–æ',
    '–ù–æ—É—Ç–±—É–∫–∏ –∏ –ö–æ–º–ø—å—é—Ç–µ—Ä—ã',
    '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
    '–ß–∞—Å—ã',
    '–°–ø–æ—Ä—Ç',
    '–î–ª—è –¥–æ–º–∞',
    ]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)
    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)
    

@dp.message_handler(Text(equals='–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'))
async def get_smart(message: types.Message):
    await message.answer('Please waiting...')
    
    main(1)
    
    with open('result.json') as file:
        data = json.load(file)
    
        
    for index, item in enumerate(data):
        card = f'{hlink(item.get("url"), item.get("name"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}{item.get("price")} –≥—Ä–Ωüî•'
    
    
        if index%5 == 0:
            asyncio.sleep(1)
            
        await message.answer(card)
        
@dp.message_handler(Text(equals='–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'))
async def get_smart(message: types.Message):
    await message.answer('Please waiting...')
    
    main(2)
    
    with open('result.json') as file:
        data = json.load(file)
    
        
    for index, item in enumerate(data):
        card = f'{hlink(item.get("url"), item.get("name"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}{item.get("price")} –≥—Ä–Ωüî•'
    
    
        if index%5 == 0:
            asyncio.sleep(1)
            
        await message.answer(card)
    
@dp.message_handler(Text(equals='TV/–§–æ—Ç–æ'))
async def get_smart(message: types.Message):
    await message.answer('Please waiting...')
    
    main(3)
    
    with open('result.json') as file:
        data = json.load(file)
    
        
    for index, item in enumerate(data):
        card = f'{hlink(item.get("url"), item.get("name"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}{item.get("price")} –≥—Ä–Ωüî•'
    
    
        if index%5 == 0:
            asyncio.sleep(1)
            
        await message.answer(card)

@dp.message_handler(Text(equals='–ù–æ—É—Ç–±—É–∫–∏ –∏ –ö–æ–º–ø—å—é—Ç–µ—Ä—ã'))
async def get_smart(message: types.Message):
    await message.answer('Please waiting...')
    
    main(4)
    
    with open('result.json') as file:
        data = json.load(file)
    
        
    for index, item in enumerate(data):
        card = f'{hlink(item.get("url"), item.get("name"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}{item.get("price")} –≥—Ä–Ωüî•'
    
    
        if index%5 == 0:
            asyncio.sleep(1)
            
        await message.answer(card)

@dp.message_handler(Text(equals='–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞'))
async def get_smart(message: types.Message):
    await message.answer('Please waiting...')
    
    main(5)
    
    with open('result.json') as file:
        data = json.load(file)
    
        
    for index, item in enumerate(data):
        card = f'{hlink(item.get("url"), item.get("name"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}{item.get("price")} –≥—Ä–Ωüî•'
    
    
        if index%5 == 0:
            asyncio.sleep(1)
            
        await message.answer(card)


@dp.message_handler(Text(equals='–ß–∞—Å—ã'))
async def get_smart(message: types.Message):
    await message.answer('Please waiting...')
    
    main(6)
    
    with open('result.json') as file:
        data = json.load(file)
    
        
    for index, item in enumerate(data):
        card = f'{hlink(item.get("url"), item.get("name"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}{item.get("price")} –≥—Ä–Ωüî•'
    
    
        if index%5 == 0:
            asyncio.sleep(1)
            
        await message.answer(card)

@dp.message_handler(Text(equals='–°–ø–æ—Ä—Ç'))
async def get_smart(message: types.Message):
    await message.answer('Please waiting...')
    
    main(7)
    
    with open('result.json') as file:
        data = json.load(file)
    
        
    for index, item in enumerate(data):
        card = f'{hlink(item.get("url"), item.get("name"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}{item.get("price")} –≥—Ä–Ωüî•'
    
    
        if index%5 == 0:
            asyncio.sleep(1)
            
        await message.answer(card)

@dp.message_handler(Text(equals='–î–ª—è –¥–æ–º–∞'))
async def get_smart(message: types.Message):
    await message.answer('Please waiting...')
    
    main(8)
    
    with open('result.json') as file:
        data = json.load(file)
    
        
    for index, item in enumerate(data):
        card = f'{hlink(item.get("url"), item.get("name"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}{item.get("price")} –≥—Ä–Ωüî•'
    
    
        if index%5 == 0:
            asyncio.sleep(1)
            
        await message.answer(card)

    
def start():
    executor.start_polling(dp)
    
    
if __name__ == '__main__':
    start()
